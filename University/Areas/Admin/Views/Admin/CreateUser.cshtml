@model University.Models.UserViewModel

@{
    ViewBag.Title = "CreateUser";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

}
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<head>
    <script type="text/javascript">

        function preventBack() { window.history.forward(); }
        setTimeout("preventBack()", 0);
        window.onunload = function () { null };

    </script>
</head>
@if (Session["UserId"] != null)
{
    <h4>Hello @Session["UserName"].ToString()</h4>
}
<style>
    .form-group .required:after {
        content: "*";
        color: red;
    }
</style>

<script src="~/Scripts/jquery-1.7.1.min.js"></script>

<script>

    $(document).ready(function () {

        $("#country").change(function () {
            var id = $(this).val();

            $("#state").empty();
            $.getJSON("StateBind", { countryId: id }, function (data) {

                var v = "<option>..Select State..</option>";
                $.each(data, function (i, v1) {
                    v += "<option Value=" + v1.Value + ">" + v1.Text + "</option>";

                });
                $("#state").html(v);
            });
        });

        $("#state").change(function () {

            var id = $(this).val();
            $("#city").empty();
            $.getJSON("CityBind", { stateId: id }, function (data) {

                var v = "<option>..Select City..</option>";
                $.each(data, function (i, v1) {
                    v += "<option Value=" + v1.Value + ">" + v1.Text + "</option>";

                });
                $("#city").html(v);
            });
        });

    });
</script>
<script>

    $(document).ready(function () {

        $("#fillAddress").on("click", function () {
            if (this.checked) {
                $("#AddressLine2").val($("#AddressLine1").val());

            }
            else {
                $("#AddressLine2").val('');

            }
        });
    });
</script>



<h2>CreateUser</h2>

@using (Html.BeginForm("CreateUser", "Admin", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label required  col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label  required col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            Male  @Html.RadioButton("Gender", "Male")

            Female  @Html.RadioButton("Gender", "Female")
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.DateOfBirth, "{0:yyyy-MM-dd}", htmlAttributes: new { @class = "form-control", @type = "date" })
            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", } })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", } })
            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsVerified, htmlAttributes: new { @class = "control-label  col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsVerified)
                @Html.ValidationMessageFor(model => model.IsVerified, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Hobbies, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Hobbies, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Hobbies, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.HiddenFor(model => model.AddressId, htmlAttributes: new { @class = "control-label col-md-2" })

        </div>*@

    @*<div class="form-group">
            @Html.LabelFor(model => model.AddressLine1, "Temporary Address", htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control", } })
                @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AddressLine2, "PermanantAddress", htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
            </div>
        </div>*@
    <div class="form-group">
        @Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @placeholder = "Enter Address" } })
            @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2">
            <input type="checkbox" id="fillAddress" name="fillAddress" onclick="fillAddress()" /> Temporary address same as permanent address.<br />
        </div>
        @Html.LabelFor(model => model.AddressLine2, htmlAttributes: new { @class = "control-label required col-md-2" })

        <div class="col-md-10">
            @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @id = "AddressLine2", @class = "form-control", @autocomplete = "off", @placeholder = "Enter Address" } })
            @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.CountryId, "Country", htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("CountryId", ViewBag.CountryList as SelectList, "--select--", htmlAttributes: new { id = "country", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.StateId, "State", htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            <select id="state" name="StateId" class="form-control">--Select State--</select>
            @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
        </div>

    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.CityId, "City", htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            <select id="city" name="CityId" class="form-control">--Select City--</select>
            @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
        </div>

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RoleId, "Role", htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("RoleId", ViewBag.RoleList as SelectList, "..select..", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CourseId, "Course", htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("CourseId", ViewBag.CourseList as SelectList, "..select..", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label required col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateCreated, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateCreated, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateModified, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateModified, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateModified, "", new { @class = "text-danger" })
            </div>
        </div>*@

    @*<div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-success" />
            <input type="reset" value="Clear" class="btn btn-primary" />
        </div>
    </div>
</div>
}

<div>
    @Html.Partial("BackToListButtonPartial")
</div>
